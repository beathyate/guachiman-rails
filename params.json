{"name":"guachiman-rails","tagline":"Authorization gem for Rails","body":"Guachiman for Rails\r\n===================\r\n\r\nBasic Authorization gem for rails based on [RailsCast #385 Authorization from Scratch][1] by Ryan Bates.\r\nBuilt on top of [guachiman][2].\r\n\r\n[![Codeship Status for goddamnhippie/guachiman-rails][3]][4]\r\n\r\n[1]: http://railscasts.com/episodes/385-authorization-from-scratch-part-1\r\n[2]: https://github.com/goddamnhippie/guachiman\r\n[3]: https://www.codeship.io/projects/06034ef0-f456-0131-65bd-5a054a318c0e/status\r\n[4]: https://www.codeship.io/projects/28084\r\n\r\nInstallation\r\n------------\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'guachiman-rails'\r\n```\r\n\r\nAnd then execute:\r\n\r\n```bash\r\n$ bundle\r\n```\r\n\r\nOr install it directly:\r\n\r\n```bash\r\n$ gem install guachiman-rails\r\n```\r\n\r\nUpgrade Notice\r\n--------------\r\n\r\n**Version 1.0.0 is incompatible with version =< 0.3.2.**\r\n\r\nUsage\r\n-----\r\n\r\nRun `rails g guachiman:install`\r\n\r\nThis will generate a `authorization.rb` file in `app/models`.\r\n\r\nInclude `Guachiman::Authorizable` in `ApplicationController` and implement a `current_user` method there.\r\n\r\n```ruby\r\n# app/controllers/application_controller.rb\r\n\r\ninclude Guachiman::Authorizable\r\n\r\ndef current_user\r\n  @current_user ||= User.find_by_auth_token(cookies[:auth_token]) if cookies[:auth_token]\r\nend\r\n```\r\n\r\nYou can also override these methods to change the behaviour, for example:\r\n\r\n### To skip authorization for admins\r\n\r\nDefaults to `false`.\r\n\r\n```ruby\r\ndef skip_authorization?\r\n  current_user.admin?\r\nend\r\n```\r\n\r\n### To handle what happens after the authorization takes place\r\n\r\nThis is the default implementation. You can modify it or break it up if you need to authorise\r\nparameters, redirect to a different page or use a different flash key (for example).\r\n\r\n```ruby\r\ndef after_authorization(authorized)\r\n  return true if authorized\r\n\r\n  if request.get? && !request.xhr?\r\n    session[:next] = request.url\r\n    redirect_to root_path, alert: t(:unauthorized)\r\n  else\r\n    render nothing: true, status: :unauthorized\r\n  end\r\nend\r\n```\r\n\r\nNow you can describe your authorization object in this way:\r\n\r\n```ruby\r\nclass Authorization\r\n  include Guachiman\r\n\r\n  def initialize(user)\r\n    if @current_user = user\r\n      user_authorization\r\n    else\r\n      guest_authorization\r\n    end\r\n  end\r\n\r\nprivate\r\n\r\n  def guest_authorization\r\n    allow :sessions, [:new, :create]\r\n    allow :users,    [:new, :create]\r\n  end\r\n\r\n  def user_authorization\r\n    guest_authorization\r\n\r\n    allow :users, [:show, :edit, :update] do |user|\r\n      @current_user.id == user.id\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThe method `#current_resource` will default to nil but you can override in the controllers:\r\n\r\n```ruby\r\nclass UsersController < ApplicationController\r\n  # ...\r\n\r\n  def current_resource\r\n    @user ||= params[:id].present? ? User.find(params[:id]) : User.new\r\n  end\r\nend\r\n```\r\n\r\nLicense\r\n-------\r\n\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}